{"version":3,"file":"static/js/784.83257750.chunk.js","mappings":"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","sources":["assets/close.svg","components/Posts/ViewNav.tsx","components/Posts/Comments.tsx","components/Posts/AddComent.tsx","components/Posts/ViewPost.tsx"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.fabc6ea21c817cc4963edd0088b74410.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC } from \"react\";\nimport favoriteSVG from '../../assets/save.svg';\nimport closeSVG from '../../assets/close.svg';\nimport upVoteSVG from '../../assets/arrow-up.svg';\nimport downVoteSVG from '../../assets/arrow-down.svg';\nimport { ViewNavProps } from \"../../types/interfaces\";\nimport { Post } from \"../../types/interfaces\";\nimport { User } from \"firebase/auth\";\nimport '../../styles/Posts/ViewNav.css';\n\nconst ViewNav: FC<ViewNavProps> = (props): JSX.Element => {\n\n  const { \n    user,\n    viewing,\n    handleUpVotePost,\n    handleDownVotePost,\n    handleFavoritePost,\n    handleStopViewingPost \n  } = props;\n\n  const viewingRef = viewing as Post;\n  const userRef = user as User;\n\n  if (viewingRef.whoLiked.includes(userRef.uid)) {\n    return (\n      <div className=\"view-nav-container\">\n        <div className=\"upvote-downvote-view-container\">\n          <img \n            id=\"svg-upvote\"\n            className=\"upvote-svg\"\n            src={upVoteSVG}\n            alt=\"upvote arrow\"\n            onClick={() => handleUpVotePost(viewing)} \n            data-testid=\"post-upvote-test\" >\n          </img>\n          <p className=\"vote-counter-text\">\n            {(viewingRef.likes - viewingRef.dislikes) > 0 ? viewingRef.likes - viewingRef.dislikes : 0}\n          </p>\n          <img \n            id=\"svg-downvote\"\n            className=\"not-downvoted\"\n            src={downVoteSVG}\n            alt=\"downvote arrow\"\n            onClick={() => handleDownVotePost(viewing)} \n            data-testid=\"post-downvote-test\" >\n          </img>\n        </div>\n        <img className=\"favorite-view-svg\"\n          src={favoriteSVG}\n          alt=\"favorite icon\"\n          onClick={() => handleFavoritePost(viewingRef)} \n          data-testid=\"post-favorite-test\" >\n        </img>\n        <div className=\"close-view-container\"\n          onClick={() => handleStopViewingPost()}\n        >\n          <img className=\"close-view-svg\"\n            src={closeSVG}\n            alt=\"close view icon\" \n            data-testid=\"post-close-test\">\n          </img>\n          <p className=\"close-view-text\">\n            Close\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  if (viewingRef.whoDisliked.includes(userRef.uid)) {\n   return (\n    <div className=\"view-nav-container\">\n      <div className=\"upvote-downvote-view-container\">\n        <img \n          id=\"svg-upvote\"\n          className=\"not-upvoted\"\n          src={upVoteSVG}\n          alt=\"upvote arrow\"\n          onClick={() => handleUpVotePost(viewing)} \n          data-testid=\"post-upvote-test\" >\n        </img>\n        <p className=\"vote-counter-text\">\n          {(viewingRef.likes - viewingRef.dislikes) > 0 ? viewingRef.likes - viewingRef.dislikes : 0}\n        </p>\n        <img \n          id=\"svg-downvote\"\n          className=\"downvote-svg\"\n          src={downVoteSVG}\n          alt=\"downvote arrow\"\n          onClick={() => handleDownVotePost(viewing)} \n          data-testid=\"post-downvote-test\" >\n        </img>\n      </div>\n      <img className=\"favorite-view-svg\"\n        src={favoriteSVG}\n        alt=\"favorite icon\"\n        onClick={() => handleFavoritePost(viewingRef)} \n        data-testid=\"post-favorite-test\" >\n      </img>\n      <div className=\"close-view-container\"\n        onClick={() => handleStopViewingPost()}\n      >\n        <img className=\"close-view-svg\"\n          src={closeSVG}\n          alt=\"close view icon\" \n          data-testid=\"post-close-test\">\n        </img>\n        <p className=\"close-view-text\">\n          Close\n        </p>\n      </div>\n    </div>\n   );\n  };\n\n  return (\n    <div className=\"view-nav-container\">\n      <div className=\"upvote-downvote-view-container\">\n        <img \n          id=\"svg-upvote\"\n          className=\"upvote-svg\"\n          src={upVoteSVG}\n          alt=\"upvote arrow\"\n          onClick={() => handleUpVotePost(viewing)} \n          data-testid=\"post-upvote-test\" >\n        </img>\n        <p className=\"vote-counter-text\">\n          {(viewingRef.likes - viewingRef.dislikes) > 0 ? viewingRef.likes - viewingRef.dislikes : 0}\n        </p>\n        <img \n          id=\"svg-downvote\"\n          className=\"downvote-svg\"\n          src={downVoteSVG}\n          alt=\"downvote arrow\"\n          onClick={() => handleDownVotePost(viewing)} \n          data-testid=\"post-downvote-test\" >\n        </img>\n      </div>\n      <img className=\"favorite-view-svg\"\n        src={favoriteSVG}\n        alt=\"favorite icon\"\n        onClick={() => handleFavoritePost(viewingRef)} \n        data-testid=\"post-favorite-test\" >\n      </img>\n      <div className=\"close-view-container\"\n        onClick={() => handleStopViewingPost()}\n      >\n        <img className=\"close-view-svg\"\n          src={closeSVG}\n          alt=\"close view icon\" \n          data-testid=\"post-close-test\">\n        </img>\n        <p className=\"close-view-text\">\n          Close\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewNav;","import React, { FC } from \"react\";\nimport { CommentsProps, Post, Comment } from \"../../types/interfaces\";\nimport upVoteSVG from '../../assets/arrow-up.svg';\nimport downVoteSVG from '../../assets/arrow-down.svg';\nimport uniqid from 'uniqid';\nimport { User } from \"firebase/auth\";\nimport '../../styles/Posts/Comments.css';\n\nconst Comments: FC<CommentsProps> = (props): JSX.Element => {\n\n  const { \n    user,\n    viewing,\n    commentList,\n    handleUpVoteComment,\n    handleDownVoteComment\n  } = props;\n\n  // for saving comment to correct post on firebase\n  const viewingRef = viewing as Post;\n  const userRef = user as User;\n\n  // default is to sort by most likes\n  const sortedComments = commentList.sort(function compareLikes(a, b): any {\n\n    if (a.likes > b.likes) {\n      return -1;\n    };\n\n    if (a.likes < b.likes) {\n      return 1;\n    };\n\n    return 0;\n\n  });\n\n  return (\n    <div className=\"comment-list\">\n      {Array.isArray(sortedComments) && commentList.map((comment) => {\n\n        if (comment.whoLiked.includes(userRef.uid)) {\n          return <div className=\"comment\" key={uniqid()}>\n            <div className=\"comment-info\">\n              <p className=\"comment-account-time-text\">\n                <strong>{comment.account}</strong>\n              </p>\n              <p className=\"comment-text\">\n                {comment.comment}\n              </p>\n            </div>\n            <div className=\"comment-interaction-container\">\n              <img \n                id=\"svg-upvote\"\n                className=\"upvote-svg\"\n                src={upVoteSVG}\n                alt=\"upvote arrow\"\n                onClick={() => handleUpVoteComment(viewingRef, comment)} \n                data-testid=\"upvote-test\" >\n              </img>\n              <p className=\"upvote-count-text\">\n                {(comment.likes - comment.dislikes) > 0 ? comment.likes - comment.dislikes : 0}\n              </p>\n              <img \n                id=\"svg-downvote\"\n                className=\"not-downvoted\"\n                src={downVoteSVG}\n                alt=\"downvote arrow\"\n                onClick={() => handleDownVoteComment(viewingRef, comment)} \n                data-testid=\"downvote-test\" >\n              </img>\n            </div>\n          </div>\n        }\n\n        if (comment.whoDisliked.includes(userRef.uid)) {\n          return <div className=\"comment\" key={uniqid()}>\n            <div className=\"comment-info\">\n              <p className=\"comment-account-time-text\">\n                <strong>{comment.account}</strong>\n              </p>\n              <p className=\"comment-text\">\n                {comment.comment}\n              </p>\n            </div>\n            <div className=\"comment-interaction-container\">\n              <img \n                id=\"svg-upvote\"\n                className=\"not-upvoted\"\n                src={upVoteSVG}\n                alt=\"upvote arrow\"\n                onClick={() => handleUpVoteComment(viewingRef, comment)} \n                data-testid=\"upvote-test\" >\n              </img>\n              <p className=\"upvote-count-text\">\n                {(comment.likes - comment.dislikes) > 0 ? comment.likes - comment.dislikes : 0}\n              </p>\n              <img \n                id=\"svg-downvote\"\n                className=\"downvote-svg\"\n                src={downVoteSVG}\n                alt=\"downvote arrow\"\n                onClick={() => handleDownVoteComment(viewingRef, comment)} \n                data-testid=\"downvote-test\" >\n              </img>\n            </div>\n          </div>\n        };\n\n         return <div className=\"comment\" key={uniqid()}>\n          <div className=\"comment-info\">\n            <p className=\"comment-account-time-text\">\n              <strong>{comment.account}</strong>\n            </p>\n            <p className=\"comment-text\">\n              {comment.comment}\n            </p>\n          </div>\n          <div className=\"comment-interaction-container\">\n            <img \n              id=\"svg-upvote\"\n              className=\"upvote-svg\"\n              src={upVoteSVG}\n              alt=\"upvote arrow\"\n              onClick={() => handleUpVoteComment(viewingRef, comment)} \n              data-testid=\"upvote-test\" >\n            </img>\n            <p className=\"upvote-count-text\">\n              {(comment.likes - comment.dislikes) > 0 ? comment.likes - comment.dislikes : 0}\n            </p>\n            <img \n              id=\"svg-downvote\"\n              className=\"downvote-svg\"\n              src={downVoteSVG}\n              alt=\"downvote arrow\"\n              onClick={() => handleDownVoteComment(viewingRef, comment)} \n              data-testid=\"downvote-test\" >\n            </img>\n          </div>\n        </div>\n      })}\n    </div>\n  );\n\n};\n\nexport default Comments;","import React, { FC } from \"react\";\nimport { AddCommentProps, Post } from \"../../types/interfaces\";\nimport '../../styles/Posts/AddComment.css';\nconst Filter = require('bad-words');\n\nconst AddComment: FC<AddCommentProps> = (props): JSX.Element => {\n\n  const { \n    user,\n    viewing,\n    handleAddCommentToPost \n  } = props;\n\n  // for saving comment to correct post on firebase\n  const viewingRef = viewing as Post;\n\n  const validateComment = (): void => {\n\n    if (typeof user === 'string') {\n      alert('only signed in users can leave comments :)');\n      return;\n    };\n\n    const filter = new Filter();\n    let commentText: string = (document.querySelector('.comment-input') as HTMLInputElement).value;\n    const validationText: Element | null = document.querySelector('#validation-text');\n\n    if (commentText.trim().length === 0) {\n      if (validationText) {\n        validationText.textContent = `Your comment must contain characters and not just white space`;\n        validationText.classList.add('text-not-authenticated');\n        setTimeout(() => {\n          if (validationText) {\n            validationText.textContent = \"\";\n            validationText.className = \"\";\n          };\n        }, 5000);\n        return;\n      };\n    };\n\n    if (commentText.length < 2) {\n      if (validationText) {\n        validationText.textContent = `Your comment was ${commentText.length} character, comments must be at least 2 characters in length`;\n        validationText.classList.add('text-not-authenticated');\n        setTimeout(() => {\n          if (validationText) {\n            validationText.textContent = \"\";\n            validationText.className = \"\";\n          };\n        }, 5000);\n        return;\n      };\n    };\n\n    if (commentText.length > 1000) {\n      if (validationText) {\n        validationText.textContent = `Your comment was ${commentText.length} characters, comments cannot exceed our 1000 character limit`;\n        validationText.classList.add('text-not-authenticated');\n        setTimeout(() => {\n          if (validationText) {\n            validationText.textContent = \"\";\n            validationText.className = \"\";\n          };\n        }, 5000);\n        return;\n      };\n    };\n\n    const scrubbedText: string = filter.clean(commentText).trim();\n    submitComment(scrubbedText);\n  };\n\n  const submitComment = (scrubbedText: string): void => {\n    const validationText: Element | null = document.querySelector('#validation-text');\n    if (validationText)  {\n      validationText.textContent = \"Thank you for contributing! :); your comment was saved.\";\n      validationText.classList.add('text-authenticated');\n      setTimeout(() => {\n        validationText.textContent = \"\";\n        validationText.className = \"\";\n      }, 5000);\n    };\n    handleAddCommentToPost(scrubbedText);\n  };\n\n  return (\n    <>\n      <div className=\"add-comment-container\">\n        <textarea className=\"comment-input\"\n          placeholder=\"Add Comment\" >\n        </textarea>\n        <button className=\"submit-comment-button\"\n          type=\"button\" \n          onClick={() => validateComment()} >\n          Submit Comment\n        </button>\n      </div>\n      <p id=\"validation-text\"></p>\n    </>\n  );\n};\n\nexport default AddComment;","import React, { FC, useEffect, useState } from \"react\";\nimport { ViewPostProps } from \"../../types/interfaces\";\nimport { Post } from \"../../types/interfaces\";\nimport ViewNav from \"./ViewNav\";\nimport Comments from \"./Comments\";\nimport AddComment from \"./AddComent\";\nimport '../../styles/Posts/ViewPost.css';\n\n// firebase imports\nimport { initializeApp } from \"firebase/app\";\nimport { getDoc, getFirestore, updateDoc } from \"firebase/firestore\";\nimport { collection, doc, getDocs, setDoc } from \"firebase/firestore\";\nimport { User } from \"firebase/auth\";\n\nconst ViewPost: FC<ViewPostProps> = (props): JSX.Element => {\n\n  const { \n    user,\n    viewing,\n    handleUpVotePost,\n    handleDownVotePost,\n    handleFavoritePost,\n    handleStopViewingPost,\n    handleUpVoteComment,\n    handleDownVoteComment,\n  } = props\n\n  const viewingRef = viewing as Post;\n  const userRef = user as User;\n\n  const [viewingPost, setViewingPost] = useState({\n    post: viewing,\n  });\n\n  // firebaseConfig\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDsPecBa3Ch5uDw4UzHiJWAjKEYOKCrNdA\",\n    authDomain: \"espressit.firebaseapp.com\",\n    projectId: \"espressit\",\n    storageBucket: \"espressit.appspot.com\",\n    messagingSenderId: \"1094129721341\",\n    appId: \"1:1094129721341:web:dc2bdc0a2b322504b04394\"\n  };\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n\n  const handleAddCommentToPost = (scrubbedComment: string): void => {\n    (async function saveComment() {\n\n      // gather and set comment data\n      const userInstanceRef = doc(db, \"users\", userRef.uid);\n      const getUserInstanceSnap = await getDoc(userInstanceRef);\n\n      if (getUserInstanceSnap.exists()) {\n        const newComment = {\n          account: getUserInstanceSnap.data().username,\n          author: userRef.uid,\n          comment: scrubbedComment,\n          dislikes: 0,\n          likes: 1,\n          pid: viewingRef.pid,\n          time: new Date().toLocaleString(),\n          whoDisliked: [],\n          whoLiked: [userRef.uid],\n        };\n\n        // add new comment to comment list\n        const postRef = doc(db, \"posts\", viewingRef.pid);\n        await updateDoc(postRef, {\n          comments: [...viewingRef.comments, newComment],\n        });\n\n        // update local data to match db for rendering\n        viewingRef.comments = [...viewingRef.comments, newComment];\n        setViewingPost({\n          post: viewingRef,\n        });\n\n        // get user data to save comment to user for deletion or modification later\n        const getUserDBRef = doc(db, \"users\", userRef.uid);\n        const getUserDBSnap = await getDoc(getUserDBRef);\n\n        // set newComment in user data with other comments\n        if (getUserDBSnap.exists()) {\n          const userDBData = getUserDBSnap.data();\n          const setUserDBRef = doc(db, \"users\", userRef.uid);\n          await updateDoc(setUserDBRef, {\n            comments: [...userDBData.comments, newComment],\n          });\n        };\n      };\n    })();\n  };\n\n  // hides CreatePost component when viewing a post, unmounts when leaving view post\n  useEffect(() => {\n\n    const createPostContainer = document.querySelector('.create-post-container');\n\n    if (createPostContainer) {\n      createPostContainer.classList.remove('create-post-container');\n      createPostContainer.classList.add('hidden-create-post-container');\n    };\n\n    return () => {\n      if (createPostContainer) {\n        createPostContainer.classList.add('create-post-container');\n        createPostContainer.classList.remove('hidden-create-post-container');\n      };\n    };\n    \n  }, []);\n\n  // when  no img or link are present\n  if (viewingRef.imgURL.length === 0 && viewingRef.link.length === 0) {\n    return (\n      <>\n        <ViewNav \n          user={user}\n          viewing={viewing}\n          handleUpVotePost={handleUpVotePost}\n          handleDownVotePost={handleDownVotePost}\n          handleFavoritePost={handleFavoritePost}\n          handleStopViewingPost={handleStopViewingPost}\n        />\n        <div className=\"post-view-container\">\n          <div className=\"post-view\">\n            <div className=\"content-view-container\">\n              <h5 className=\"post-account-time\">\n                {`${viewingRef.account}`}\n              </h5>\n              <h1 className=\"post-view-title\" >\n                {viewingRef.title}\n              </h1>\n              <h6 className=\"post-view-link\">\n                {viewingRef.link}\n              </h6>\n              <h3 className=\"post-view-description\" >\n                {viewingRef.body}\n              </h3>\n              <p className=\"post-views-text\">\n                <em>{viewingRef.views} Views</em>\n              </p>\n            </div>\n          </div>\n          <AddComment \n            user={user}\n            viewing={viewing}\n            handleAddCommentToPost={handleAddCommentToPost}\n          />\n          <Comments \n            user={user}\n            viewing={viewing}\n            commentList={viewingRef.comments}\n            handleUpVoteComment={handleUpVoteComment}\n            handleDownVoteComment={handleDownVoteComment}\n          />\n        </div>\n      </>\n    );\n\n    // when img is included\n  } else if (viewingRef.imgURL.length === 0 && viewingRef.link.length !== 0) {\n    return (\n      <>\n        <ViewNav \n          user={user}\n          viewing={viewing}\n          handleUpVotePost={handleUpVotePost}\n          handleDownVotePost={handleDownVotePost}\n          handleFavoritePost={handleFavoritePost}\n          handleStopViewingPost={handleStopViewingPost}\n        />\n        <div className=\"post-view-container\">\n          <div className=\"post-view\">\n            <div className=\"content-view-container\">\n              <h5 className=\"post-account-time\">\n                {`${viewingRef.account}`}\n              </h5>\n              <h1 className=\"post-view-title\" >\n                {viewingRef.title}\n              </h1>\n              <a className=\"post-view-link\" href={viewingRef.link}>\n                {viewingRef.link}\n              </a>\n              <h3 className=\"post-view-description\" >\n                {viewingRef.body}\n              </h3>\n              <p className=\"post-views-text\">\n                <em>{viewingRef.views} Views</em>\n              </p>\n            </div>\n          </div>\n          <AddComment \n            user={user}\n            viewing={viewing}\n            handleAddCommentToPost={handleAddCommentToPost}\n          />\n          <Comments \n            user={user}\n            viewing={viewing}\n            commentList={viewingRef.comments}\n            handleUpVoteComment={handleUpVoteComment}\n            handleDownVoteComment={handleDownVoteComment}\n          />\n        </div>\n      </>\n    );\n\n    // when a link is present, but no img\n  } else if (viewingRef.imgURL.length !== 0 && viewingRef.link.length === 0) {\n    return (\n     <>\n      <ViewNav \n        user={user}\n        viewing={viewing}\n        handleUpVotePost={handleUpVotePost}\n        handleDownVotePost={handleDownVotePost}\n        handleFavoritePost={handleFavoritePost}\n        handleStopViewingPost={handleStopViewingPost}\n      />\n       <div className=\"post-view-container\">\n        <div className=\"post-view\">\n          <div className=\"content-view-container\">\n            <h5 className=\"post-account-time\">\n              {`${viewingRef.account}`}\n            </h5>\n            <h1 className=\"post-view-title\" >\n              {viewingRef.title}\n            </h1>\n            <img className=\"post-view-img\"\n              alt=\"user post\"\n              src={viewingRef.imgURL} >\n            </img>\n            <h3 className=\"post-view-description\" >\n              {viewingRef.body}\n            </h3>\n            <p className=\"post-views-text\">\n              <em>{viewingRef.views} Views</em>\n            </p>\n          </div>\n        </div>\n        <AddComment \n            user={user}\n            viewing={viewing}\n            handleAddCommentToPost={handleAddCommentToPost}\n          />\n          <Comments \n            user={user}\n            viewing={viewing}\n            commentList={viewingRef.comments}\n            handleUpVoteComment={handleUpVoteComment}\n            handleDownVoteComment={handleDownVoteComment}\n          />\n      </div>\n     </>\n    );\n  } else {\n    return (\n      <p>Error, we're not sure what happened there :/</p>\n    );\n  };\n  \n};\n\nexport default ViewPost;"],"names":["props","user","viewing","handleUpVotePost","handleDownVotePost","handleFavoritePost","handleStopViewingPost","viewingRef","userRef","whoLiked","includes","uid","className","id","src","upVoteSVG","alt","onClick","likes","dislikes","downVoteSVG","favoriteSVG","closeSVG","whoDisliked","commentList","handleUpVoteComment","handleDownVoteComment","sortedComments","sort","a","b","Array","isArray","map","comment","account","uniqid","Filter","require","handleAddCommentToPost","submitComment","scrubbedText","validationText","document","querySelector","textContent","classList","add","setTimeout","placeholder","type","filter","commentText","value","trim","length","clean","alert","validateComment","useState","post","setViewingPost","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","scrubbedComment","userInstanceRef","doc","getDoc","getUserInstanceSnap","exists","newComment","data","username","author","pid","time","Date","toLocaleString","postRef","updateDoc","comments","getUserDBRef","getUserDBSnap","userDBData","setUserDBRef","useEffect","createPostContainer","remove","imgURL","link","title","body","views","href"],"sourceRoot":""}