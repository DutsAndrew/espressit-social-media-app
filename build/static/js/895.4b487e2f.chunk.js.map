{"version":3,"file":"static/js/895.4b487e2f.chunk.js","mappings":"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","sources":["components/auth/EditProfile.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { EditProfileProps, UserInstance } from '../../types/interfaces';\nimport { User, getAuth, deleteUser, reload } from \"firebase/auth\";\nimport { doc, getDoc, updateDoc, getFirestore, deleteDoc } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from \"firebase/storage\";\nimport '../../styles/auth/EditProfile.css';\nconst Filter = require('bad-words');\n\nconst EditProfile: FC<EditProfileProps> = (props): JSX.Element => {\n\n  const { \n    currentUser,\n    toggleEditProfilePage,\n    returnToMainAfterProfileEdit \n  } = props;\n\n    // converting potential non-auth user to guaranteed firebase auth user\n    const userRef = currentUser as User;\n\n    const [userInstance, setUserInstance] = useState<UserInstance>({\n      user: {\n        comments: [],\n        displayName: \"\",\n        favoritePosts: [],\n        posts: [],\n        imgURL: \"\",\n        uid: \"\",\n        username: \"\",\n      },\n    });\n\n  const [selectedFile, setSelectedFile] = useState();\n\n  //firebase config\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDsPecBa3Ch5uDw4UzHiJWAjKEYOKCrNdA\",\n    authDomain: \"espressit.firebaseapp.com\",\n    projectId: \"espressit\",\n    storageBucket: \"espressit.appspot.com\",\n    messagingSenderId: \"1094129721341\",\n    appId: \"1:1094129721341:web:dc2bdc0a2b322504b04394\"\n  };\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore(app);\n  const storage = getStorage(app);\n\n  useEffect(() => {\n    (async function fetchUserInstance(): Promise<void> {\n      // fetch userInstance\n      const userInstanceRef = doc(db, \"users\", userRef.uid);\n      const userInstanceSnap = await getDoc(userInstanceRef);\n      if (userInstanceSnap.exists()) {\n        const userInstanceData = userInstanceSnap.data();\n  \n        // sync local state with user data\n        setUserInstance({\n          user: {\n            comments: userInstanceData.comments,\n            displayName: userInstanceData.displayName,\n            favoritePosts: userInstanceData.favoritePosts,\n            posts: userInstanceData.posts,\n            imgURL: userInstanceData.imgURL,\n            uid: userInstanceData.uid,\n            username: userInstanceData.username,\n          },\n        });\n      };\n    })();\n  }, []);\n\n  const usernameFormat: RegExp = /^[a-z]{3,12}$|^[a-z]{3,12}\\d{2,4}$/g;\n  const mailFormat: RegExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/g;\n  const filter = new Filter();\n\n  const handleProfileEditChange = (e: any): void => {\n\n    e.preventDefault();\n    const entryThatChanged = e.target;\n    const errorText = entryThatChanged.nextSibling as HTMLElement;\n\n    if (entryThatChanged && errorText) {\n      if ((entryThatChanged.id === \"username-edit-input\"\n        && entryThatChanged.validity.valid\n        && entryThatChanged.value.match(usernameFormat)\n        && !filter.isProfane(entryThatChanged.value))\n      ) {\n        errorText.textContent = \"\";\n        errorText.className = \"error\";\n      } else {\n        showError(entryThatChanged, errorText);\n      };\n    };\n  };\n\n  const showError = (entry: any, error: any): void => {\n\n    if (entry.id === 'username-edit-input') {\n      if (entry.validity.valueMissing) {\n        error.textContent = \"If you are updating your username this input cannot be blank :)\";\n        error.classList.add(\"error\", \"error-active\");\n      } else if (!entry.value.match(usernameFormat)) {\n        error.textContent = \"Your username does not match our rules of: 1) 3-12 lowercase letters or 3-12 lowercase letters and 2-4 numbers, 2) no symbols, 3) no uppercase characters\";\n        error.classList.add(\"error\", \"error-active\");\n      } else if (filter.isProfane(entry.value)) {\n        error.textContent = \"We don't accept profanity in usernames, sorry :(\";\n        error.classList.add(\"error\", \"error-active\");\n      }\n      return;\n    };\n\n  };\n\n  const handlePictureChange = (e: any): void => {\n    setSelectedFile(e?.target.files[0]);\n  };\n\n  const validateSubmitRequest = (e: React.FormEvent<HTMLFormElement>): void  => {\n    e.preventDefault();\n\n    const usernameEntry = (document.getElementById(\"username-edit-input\") as HTMLInputElement);\n    const activeErrors = document.querySelectorAll('.error-active').length;\n\n    // validate username edit\n    if (usernameEntry.value.length !== 0) {\n\n      if (activeErrors !== 0) return;\n\n      if (!usernameEntry.validity.valid || !usernameEntry.value.match(usernameFormat)) {\n        showError(usernameEntry, usernameEntry.nextSibling);\n        return;\n      };\n\n      // check if profanity is hidden in username\n      for (let i = 0; i < usernameEntry.value.length; i++) {\n        const usernameText = usernameEntry.value.slice(i);\n        if (filter.isProfane(usernameText)) {\n          const errorText = document.querySelector('#username-edit-input-error');\n          if (errorText) {\n            errorText.textContent = \"We don't accept profanity in usernames, sorry :(\";\n            errorText.classList.add(\"error\", \"error-active\");\n            return;\n          };\n        };\n      };\n\n      submitNewUsername(usernameEntry.value);\n    };\n\n    // validate picture\n    if (selectedFile !== undefined) {\n      uploadNewProfileImg();\n    };\n  }\n\n  const submitNewUsername = (newUsername: string): void => {\n    if (newUsername.length > 2) {\n      (async function saveNewUsernameToUserInstance() {\n        const userInstanceRef = doc(db, \"users\", userRef.uid);\n        await updateDoc(userInstanceRef, {\n          username: newUsername,\n        });\n      })();\n      // return to home\n      returnToMainAfterProfileEdit();\n    };\n  };\n\n  // remove previous imgURL from storage if there was one\n  async function removePreviousProfileImg() {\n    const userInstanceRef = doc(db, \"users\", userRef.uid);\n    const userSnap = await getDoc(userInstanceRef);\n\n    if (userSnap.exists()) {\n      const userData = userSnap.data();\n      if (userData.imgURL.slice(0, 38) === 'https://firebasestorage.googleapis.com') {\n        // user has a imgURL that was uploaded to firebase and not from Google API\n        const currentProfilePhotoRef = ref(storage, userData.imgURLRef);\n        deleteObject(currentProfilePhotoRef).then(() => {\n          // File deleted successfully, set userInstance to empty string\n            updateDoc(userInstanceRef, {\n              imgURLRef: \"\",\n            });\n        }).catch((error) => {\n          alert('we were unable to remove your previous profile picture and therefor did not upload your new picture, please try again later');\n          return;\n        });\n      };\n    };\n  };\n\n  const uploadNewProfileImg = (): void => {  \n\n    // handle profile picture upload/update\n    if (typeof selectedFile === undefined || typeof selectedFile === 'undefined') {\n      return;\n    };\n\n    if (typeof selectedFile !== undefined ||  typeof selectedFile !== 'undefined') {\n\n      // remove previous imgURL from storage if there was one\n      removePreviousProfileImg();\n\n      (async function uploadNewPictureAndSetAsProfilePicture() {\n        const storage = getStorage();\n        const storageRef = ref(storage, `images/${(selectedFile as any).name}`);\n        uploadBytes(storageRef, selectedFile)\n          .then((snapshot) => {\n            // image has been uploaded to the db\n            // download url for uploaded image\n            getDownloadURL(ref(storage, `images/${(selectedFile as any).name}`))\n              .then((url) => {\n                // `url` is the download URL for 'images/${selectedFile.name}'\n                // save url and storageRef to userInstance\n                const userInstanceRef = doc(db, \"users\", userRef.uid);\n                updateDoc(userInstanceRef, {\n                  imgURL: url,\n                  imgURLRef: `images/${(selectedFile as any).name}`,\n                });\n                // return to home\n                returnToMainAfterProfileEdit();\n              })\n              .catch((error) => {\n                alert('your profile picture was uploaded to the database, but we were not able to save it to your profile, please try again later');\n              });\n          })\n          .catch(() => {\n            alert('your image was not uploaded to the server, please try again later');\n            return;\n          });\n      })();\n    };\n  };\n\n  const handleReturnToMain = (): void => {\n    toggleEditProfilePage();\n  };\n\n  const handleDeleteAccount = async (): Promise<void> => {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    await removePreviousProfileImg();\n\n    await deleteDoc(doc(db, \"users\", userRef.uid)).then(() => {\n      // userInstance deleted\n    }).catch((error) => {\n      alert('We were not able to remove your posts, comments, etc; please reach out to dutsandrew@gmail.com to resolve this issue');\n    })\n\n    await deleteUser((user as User)).then(() => {\n      // User deleted.\n    }).catch((error) => {\n      alert('We were not able to delete your account, please try again later!');\n    });\n    \n    returnToMainAfterProfileEdit();\n    window.location.reload();\n  };\n\n  const handleRemoveAccountInfo = (): void => {\n    const userInstanceRef = doc(db, \"users\", userRef.uid);\n      updateDoc(userInstanceRef, {\n        comments: [],\n        favoritePosts: [],\n        posts: [],\n    });\n  };\n\n  return (\n    <form className=\"edit-profile-form\"\n      onSubmit={validateSubmitRequest}\n    >\n      <button type=\"button\"\n        className=\"return-to-main-page-button\"\n        onClick={handleReturnToMain} >\n        Return To Home\n      </button>\n      <fieldset className=\"edit-profile-fieldset\">\n        <legend className=\"edit-profile-legend\" >\n          Profile Information:\n        </legend>\n        <label htmlFor=\"user-name\"\n          className=\"edit-profile-label\">\n          **Username:\n        </label>\n        <input id=\"username-edit-input\"\n          name=\"user-name\"\n          className=\"edit-profile-input\"\n          placeholder={userInstance.user.username ? userInstance.user.username : \"anonymous\"}\n          onChange={handleProfileEditChange}\n          data-testid=\"username\" >\n        </input>\n        <p id=\"username-edit-input-error\"\n          className =\"error-msg\" >\n        </p>\n        <label htmlFor=\"profile-picture\"\n          className=\"edit-profile-label\">\n          Profile Picture:\n        </label>\n        <input id=\"profile-picture-edit-input\" \n          className=\"edit-profile-input\"\n          type=\"file\"\n          onChange={handlePictureChange}\n          alt=\"user profile picture\"\n          accept=\"image/*\" >\n        </input>\n        <p id=\"profile-picture-input-error\"\n          className =\"error-msg\" >\n        </p>\n        <button type=\"submit\"\n          className=\"submit-profile-button\">\n          Submit Information\n        </button>\n      </fieldset>\n      <fieldset className=\"edit-profile-fieldset\">\n        <legend className=\"edit-profile-legend\" >\n          Danger Zone\n        </legend>\n        <button type=\"button\"\n          className=\"delete-account-button\"\n          onClick={handleDeleteAccount} >\n          Delete Account\n        </button>\n        <button type=\"button\"\n          className=\"remove-data-button\"\n          onClick={handleRemoveAccountInfo}>\n          Remove all Contributions\n        </button>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default EditProfile;"],"names":["Filter","require","props","currentUser","toggleEditProfilePage","returnToMainAfterProfileEdit","userRef","useState","user","comments","displayName","favoritePosts","posts","imgURL","uid","username","userInstance","setUserInstance","selectedFile","setSelectedFile","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","storage","getStorage","useEffect","userInstanceRef","doc","getDoc","userInstanceSnap","exists","userInstanceData","data","usernameFormat","filter","showError","entry","error","id","validity","valueMissing","textContent","classList","add","value","match","isProfane","submitNewUsername","newUsername","length","updateDoc","removePreviousProfileImg","userSnap","userData","slice","currentProfilePhotoRef","ref","imgURLRef","deleteObject","then","catch","alert","uploadNewProfileImg","undefined","storageRef","name","uploadBytes","snapshot","getDownloadURL","url","handleDeleteAccount","auth","getAuth","deleteDoc","deleteUser","window","location","reload","className","onSubmit","e","preventDefault","usernameEntry","document","getElementById","activeErrors","querySelectorAll","valid","nextSibling","i","usernameText","errorText","querySelector","type","onClick","htmlFor","placeholder","onChange","entryThatChanged","target","files","alt","accept"],"sourceRoot":""}