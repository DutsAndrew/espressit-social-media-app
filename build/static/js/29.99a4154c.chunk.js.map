{"version":3,"file":"static/js/29.99a4154c.chunk.js","mappings":"8MAIMA,EAASC,EAAQ,KA0EvB,EAxE0C,SAACC,GAEzC,IAAQC,EAA+DD,EAA/DC,oCAAqCC,EAA0BF,EAA1BE,sBAEvCC,EAAS,IAAIL,EACbM,EAAyB,sCAmC/B,OACE,kBACEC,UAAU,oBACVC,SAAU,SAACC,GAAC,OA3Ba,SAACA,GAC5BA,EAAEC,iBAEF,IAAMC,EAASC,SAASC,cAAc,uBAA4CC,MAC5EC,EAAUH,SAASC,cAAc,uBAEvC,OAAIR,EAAOW,UAAUL,QACnBM,MAAM,oCAEIZ,EAAOW,UAAUL,IAAUI,EAAOG,SAASC,OAASR,EAAMS,MAAMd,QAC1EH,EAAoCQ,QAGpCM,MAAM,+KAIV,CAUqBI,CAAqBZ,EAAE,EAAC,WACzC,mBACEF,UAAU,8BACVe,KAAK,SACLC,QAAS,SAACd,GAAC,OAZU,SAACA,GAC1BA,EAAEC,iBACFN,GACF,CASsBoB,CAAmBf,EAAE,EAAC,6BAGxC,kBACEF,UAAU,qBAAoB,0BAGhC,kBACEA,UAAU,qBACVkB,YAAY,gBACZC,UAAW,EACXC,UAAW,GACXL,KAAK,OACLM,UAAQ,EACRC,SAAU,kBAtDS,WACvB,IAAIlB,EAASC,SAASC,cAAc,uBAA4CC,MAChF,GAAIT,EAAOW,UAAUL,GAGnB,OAFAM,MAAM,wCACNN,EAAQ,GAGZ,CA+CsBmB,EAAkB,KAEpC,mBACEvB,UAAU,yBACVe,KAAK,SAAQ,sBAKrB,C","sources":["components/auth/AddUsername.tsx"],"sourcesContent":["import { create } from \"domain\";\nimport React, { FC } from \"react\";\nimport { AddUsernameProps } from \"types/interfaces\";\nimport '../../styles/auth/AddUsername.css';\nconst Filter = require('bad-words');\n\nconst AddUsername: FC<AddUsernameProps> = (props): JSX.Element => {\n\n  const { createUserInstanceAfterGoogleSignIn, toggleAddUsernamePage } = props;\n\n  const filter = new Filter(),\n        usernameFormat: RegExp = /^[a-z]{3,12}$|^[a-z]{3,12}\\d{2,4}$/g;\n\n  const validateUsername = (): void => {\n    let input = (document.querySelector('.input-add-username') as HTMLInputElement).value;\n    if (filter.isProfane(input)) {\n      alert('we don\\'t allow profane language');\n      input = '';\n      return;\n    };\n  };\n\n  const handleUsernameSubmit = (e: any): void => {\n    e.preventDefault();\n\n    const input = (document.querySelector('.input-add-username') as HTMLInputElement).value,\n          target = (document.querySelector('.input-add-username') as HTMLInputElement);\n\n    if (filter.isProfane(input)) {\n      alert('we don\\'t allow profane language');\n      return;\n    } else if (!filter.isProfane(input) && target.validity.valid && input.match(usernameFormat)) {\n      createUserInstanceAfterGoogleSignIn(input);\n      return;\n    } else {\n      alert('Your username does not match our rules of: 1) 3-12 lowercase letters or 3-12 lowercase letters and 2-4 numbers, 2) no symbols, 3) no uppercase characters, 4) no swear words');\n      return;\n    };\n\n  };\n\n  const handleReturnToHome = (e: any): void => {\n    e.preventDefault();\n    toggleAddUsernamePage();\n  };\n\n  return (\n    <form\n      className=\"add-username-form\"\n      onSubmit={(e) => handleUsernameSubmit(e)}>\n      <button\n        className=\"return-from-username-button\"\n        type=\"button\"\n        onClick={(e) => handleReturnToHome(e)}>\n        Return to Main\n      </button>\n      <label\n        className=\"label-add-username\">\n        **Username:\n      </label>\n      <input\n        className=\"input-add-username\"\n        placeholder=\"MasterChief91\"\n        minLength={3}\n        maxLength={16}\n        type=\"text\"\n        required\n        onChange={() => validateUsername()}>\n      </input>\n      <button\n        className=\"submit-username-button\"\n        type=\"submit\" >\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default AddUsername;"],"names":["Filter","require","props","createUserInstanceAfterGoogleSignIn","toggleAddUsernamePage","filter","usernameFormat","className","onSubmit","e","preventDefault","input","document","querySelector","value","target","isProfane","alert","validity","valid","match","handleUsernameSubmit","type","onClick","handleReturnToHome","placeholder","minLength","maxLength","required","onChange","validateUsername"],"sourceRoot":""}