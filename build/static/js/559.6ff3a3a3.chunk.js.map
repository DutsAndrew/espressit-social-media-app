{"version":3,"file":"static/js/559.6ff3a3a3.chunk.js","mappings":"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","sources":["assets/close.svg","components/CreatePost/TextForm.tsx","assets/image.svg","assets/link.svg","assets/tamper.svg","assets/text.svg","components/CreatePost/PostNav.tsx","components/CreatePost/CreatePostWeb.tsx"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.fabc6ea21c817cc4963edd0088b74410.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC } from \"react\";\nimport { TextFormProps } from '../../types/interfaces';\nimport '../../styles/CreatePost/TextForm.css';\n\nconst TextForm: FC<TextFormProps> = (props): JSX.Element => {\n\n  const { handleFormSubmission } = props;\n\n  return (\n    <div className=\"create-post-text-container\">\n      <form className=\"create-post-form\"\n        onSubmit={(e) => handleFormSubmission(e)}\n      >\n        <fieldset className=\"create-post-fieldset\">\n          <label htmlFor=\"text-body-input\"\n            className=\"text-body-label\">\n            Paint the picture for us:\n          </label>\n          <textarea id=\"text-body-input\"\n            className=\"text-body-input\"\n            placeholder=\"So there I was... fighting the spiders\" >\n          </textarea>\n          <button className=\"post-submit-button\"\n            type=\"submit\">\n            Post\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n};\n\nexport default TextForm;","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgImage(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgImage);\nexport default __webpack_public_path__ + \"static/media/image.0087f96340c2affaf0f75083d3689173.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgLink(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.9,12C3.9,10.29 5.29,8.9 7,8.9H11V7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H11V15.1H7C5.29,15.1 3.9,13.71 3.9,12M8,13H16V11H8V13M17,7H13V8.9H17C18.71,8.9 20.1,10.29 20.1,12C20.1,13.71 18.71,15.1 17,15.1H13V17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLink);\nexport default __webpack_public_path__ + \"static/media/link.d976018452207b11b7638f9f01d4a57d.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgTamper(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12,3A3,3 0 0,0 9,6C9,9 14,13 6,13A2,2 0 0,0 4,15V17H20V15A2,2 0 0,0 18,13C10,13 15,9 15,6C15,4 13.66,3 12,3M6,19V21H18V19H6Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTamper);\nexport default __webpack_public_path__ + \"static/media/tamper.bb28ccb0cfb910ceb6ad891e8a70e048.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgText(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.62,12L12,5.67L14.37,12M11,3L5.5,17H7.75L8.87,14H15.12L16.25,17H18.5L13,3H11Z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgText);\nexport default __webpack_public_path__ + \"static/media/text.5eed8b14a5f416722e9b7103a514e84a.svg\";\nexport { ForwardRef as ReactComponent };","import React, { FC } from \"react\";\nimport imgSVG from '../../assets/image.svg';\nimport linkSVG from '../../assets/link.svg';\nimport tamperSVG from '../../assets/tamper.svg';\nimport textSVG from '../../assets/text.svg';\nimport { PostNavProps } from '../../types/interfaces';\nimport '../../styles/CreatePost/PostNav.css';\n\nconst PostNav: FC<PostNavProps> = (props): JSX.Element => {\n\n  const { handlePostType } = props;\n\n  return (\n    <div className=\"create-post-container\" >\n      <img className=\"create-post-tamper-img\"\n        src={tamperSVG}\n        alt=\"profile\">\n      </img>\n      <input className=\"create-post-text-input\"\n        onFocus={() => handlePostType({text: true})}\n        placeholder=\"Title of Post\" >\n      </input>\n      <button type=\"button\" \n        className=\"create-post-insert-text\">\n        <img className=\"create-post-svg\" \n          src={textSVG} \n          alt=\"text icon\"\n          onClick={() => handlePostType({text: true})}>\n        </img>\n      </button>\n      <button type=\"button\"\n        className=\"create-post-insert-img\">\n        <img className=\"create-post-svg\"\n          src={imgSVG}\n          alt=\" img icon\"\n          onClick={() => handlePostType({img: true})} >\n        </img>\n      </button>\n      <button type=\"button\"\n        className=\"create-post-insert-link\">\n        <img className=\"create-post-svg\"\n          src={linkSVG}\n          alt=\"link icon\"\n          onClick={() => handlePostType({link: true})} >\n        </img>\n      </button>\n    </div>\n  );\n};\n\nexport default PostNav;","import React, { useEffect, useState, FC } from \"react\";\nimport { CreatePostProps, postType } from '../../types/interfaces';\nimport TextForm from \"./TextForm\";\nimport PostNav from \"./PostNav\";\nimport uniqid from 'uniqid';\nimport { User } from \"firebase/auth\";\nimport { doc, setDoc, updateDoc, getFirestore, Firestore, getDoc } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from \"firebase/storage\";\nimport closeItem from '../../assets/close.svg';\nimport '../../styles/CreatePost/CreatePost.css';\n\nconst CreatePostWeb: FC<CreatePostProps> = (props): JSX.Element => {\n\n  const { user, fetchNewPost } = props;\n\n  const [postData, setPostData] = useState({\n    status: false,\n    type: '',\n  }),\n  [selectedFile, setSelectedFile] = useState();\n\n  const handlePostType = (typeOfPost: postType) => {\n\n    // helps render the correct post type\n    if (typeOfPost.text) {\n\n      setPostData({\n        status: true,\n        type: \"text\",\n      });\n\n    } else if (typeOfPost.img) {\n\n      setPostData({\n        status: true,\n        type: \"img\",\n      });\n\n    } else if (typeOfPost.link) {\n\n      setPostData({\n        status: true,\n        type: \"link\",\n      });\n\n    };\n\n  };\n\n  const handleCloseForm = () => {\n\n    setPostData({\n      status: false,\n      type: '',\n    });\n\n  };\n\n  const handleInsertImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\n    if (e.target.files) setSelectedFile((e.target.files as any)[0]);\n\n  };\n\n  const handleInsertLink = () => {\n    const input = document.querySelector('.insert-link-input') as HTMLInputElement,\n          errorText = document.querySelector('.error-text-post-input');\n\n    // handles error text production and removal\n    if (input.validity.valid === false) {\n     if (errorText) {\n      errorText.textContent = \"Your link must have: 1) https:// 2) URL 3) .com, .net, .org, or other website ending\";\n      setTimeout(() => {\n        errorText.textContent = \"\";\n      }, 10000);\n     };\n    };\n  };\n\n  const handleFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\n\n    e.preventDefault();\n\n    const userRef = (user as User);\n\n    //firebase config\n    const firebaseConfig = {\n      apiKey: \"AIzaSyDsPecBa3Ch5uDw4UzHiJWAjKEYOKCrNdA\",\n      authDomain: \"espressit.firebaseapp.com\",\n      projectId: \"espressit\",\n      storageBucket: \"espressit.appspot.com\",\n      messagingSenderId: \"1094129721341\",\n      appId: \"1:1094129721341:web:dc2bdc0a2b322504b04394\"\n    },\n    // Initialize Firebase\n    app = initializeApp(firebaseConfig),\n    db = getFirestore(app);\n\n    const titleOfPost: string | null = (document.querySelector('.create-post-text-input') as HTMLInputElement).value,\n          bodyOfPost: string | null = (document.querySelector('#text-body-input') as HTMLInputElement).value;\n\n    if (postData.type === \"text\") {\n      createPostTypeText(userRef, db, titleOfPost, bodyOfPost);\n      handleCloseForm();\n      return;\n    };\n\n    if (postData.type === \"img\") {\n      createPostTypeImg(userRef, db, titleOfPost, bodyOfPost);\n      handleCloseForm();\n      return;\n    };\n\n    if (postData.type === \"link\") {\n      const linkOfPost: string | null = (document.querySelector('.insert-link-input') as HTMLInputElement).value;\n      createPostTypeLink(userRef, db, titleOfPost, bodyOfPost, linkOfPost);\n      handleCloseForm();\n      return;\n    };\n\n  };\n\n  const createPostTypeText = async (userRef: User, db: Firestore, titleOfPost: string, bodyOfPost: string): Promise<void> => {\n\n    const id = uniqid(),\n          userInstanceRef = doc(db, \"users\", userRef.uid),\n          getUserInstanceSnap = await getDoc(userInstanceRef);\n\n    if (getUserInstanceSnap.exists()) {\n\n      const post = {\n        account: getUserInstanceSnap.data().username,\n        author: userRef.uid,\n        body: bodyOfPost,\n        comments: [],\n        dislikes: 0,\n        imgURL: '',\n        imgURLRef: '',\n        likes: 1,\n        link: '',\n        pid: id,\n        time: new Date().toLocaleString(),\n        title: titleOfPost,\n        views: 0,\n        whoDisliked: [],\n        whoLiked: [userRef.uid],\n      };\n\n      await updateDoc(userInstanceRef, {\n        posts: [...getUserInstanceSnap.data().posts, post],\n      });\n\n      await setDoc(doc(db, \"posts\", id),\n        post,\n      );\n\n    };\n\n    fetchNewPost();\n\n  };\n\n  const createPostTypeImg = async (userRef: User, db: Firestore, titleOfPost: string, bodyOfPost: string): Promise<void> => {\n\n    const id = uniqid(),\n          storage = getStorage(),\n          storageRef = ref(storage, `postImgs/${(selectedFile as any).name}`);\n\n    if (selectedFile !== undefined) {\n\n      uploadBytes(storageRef, selectedFile)\n        .then((snapshot) => {\n          // image has been uploaded to the db\n          // download url for uploaded image\n          getDownloadURL(ref(storage, `postImgs/${(selectedFile as any).name}`))\n            .then((url) => {\n              // `url` is the download URL for 'images/${selectedFile.name}'\n              // save url and storageRef to post\n              (async function setPostDataWithImgURL() {\n\n                const userInstanceRef = doc(db, \"users\", userRef.uid),\n                      getUserInstanceSnap = await getDoc(userInstanceRef);\n    \n                if (getUserInstanceSnap.exists()) {\n\n                  const post = {\n                    account: userRef.uid,\n                    author: getUserInstanceSnap.data().username,\n                    body: bodyOfPost,\n                    comments: [],\n                    dislikes: 0,\n                    imgURL: url,\n                    imgURLRef: `postImgs/${(selectedFile as any).name}`,\n                    likes: 1,\n                    link: '',\n                    pid: id,\n                    time: new Date().toLocaleString(),\n                    title: titleOfPost,\n                    views: 0,\n                    whoDisliked: [],\n                    whoLiked: [userRef.uid],\n                  };\n\n                  await updateDoc(userInstanceRef, {\n                    posts: [...getUserInstanceSnap.data().posts, post],\n                  });\n\n                  await setDoc(doc(db, \"posts\", id),\n                    post,\n                  );\n\n                };\n\n                fetchNewPost();\n\n              })();\n\n            })\n            .catch((error) => {\n              alert('We were not able to attach the picture you uploaded to your post, please try again later');\n              deleteObject(storageRef)\n                .then(() => {\n                  // File deleted successfully\n                })\n                .catch((error) => {\n                  alert('We were not able to delete the picture you uploaded and it is not connected to anything, please reach out to dutsandrew@gmail.com if you see this message');\n                  return;\n                });\n            });\n        })\n        .catch(() => {\n\n          alert('your image was not uploaded to the server so we cancelled the post upload, please try again later');\n          return;\n\n        });\n\n    };\n\n  };\n\n  const createPostTypeLink = async (userRef: User, db: Firestore, titleOfPost: string, bodyOfPost: string, linkOfPost: string): Promise<void> => {\n\n    const id = uniqid(),\n          userInstanceRef = doc(db, \"users\", userRef.uid),\n          getUserInstanceSnap = await getDoc(userInstanceRef);\n\n    if (getUserInstanceSnap.exists()) {\n\n      const post = {\n        account: getUserInstanceSnap.data().username,\n        author: userRef.uid,\n        body: bodyOfPost,\n        comments: [],\n        dislikes: 0,\n        imgURL: '',\n        imgURLRef: '',\n        likes: 1,\n        link: linkOfPost,\n        pid: id,\n        time: new Date().toLocaleString(),\n        title: titleOfPost,\n        views: 0,\n        whoDisliked: [],\n        whoLiked: [userRef.uid],\n      };\n\n      await updateDoc(userInstanceRef, {\n        posts: [...getUserInstanceSnap.data().posts, post],\n      });\n\n      await setDoc(doc(db, \"posts\", id),\n        post,\n      );\n      \n    };\n\n    fetchNewPost();\n\n  };\n\n  if (postData.status === true && postData.type === \"text\") {\n    return (\n      <>\n        <button className=\"close-form-button\"\n          type=\"button\"\n          onClick={handleCloseForm} >\n          <img className=\"close-button-svg\"\n            src={closeItem}\n            alt=\"close svg\" >\n          </img>\n        </button>\n        <PostNav handlePostType={handlePostType} />\n        <TextForm handleFormSubmission={handleFormSubmission} />\n      </>\n    );\n  };\n\n  if (postData.status === true && postData.type === \"img\") {\n    return (\n      <>\n        <button className=\"close-form-button\"\n          type=\"button\"\n          onClick={handleCloseForm} >\n          <img className=\"close-button-svg\"\n            src={closeItem}\n            alt=\"close svg\" >\n          </img>\n        </button>\n        <PostNav handlePostType={handlePostType} />\n        <div className=\"create-post-img-container\">\n          <input className=\"insert-image-input\"\n            type=\"file\"\n            accept=\"/image/*\"\n            onChange={(e) => handleInsertImage(e)} >\n          </input>\n        </div>\n        <TextForm handleFormSubmission={handleFormSubmission} />\n      </>\n    );\n  };\n\n  if (postData.status === true && postData.type === \"link\") {\n    return (\n      <>\n        <button className=\"close-form-button\"\n          type=\"button\"\n          onClick={handleCloseForm} >\n          <img className=\"close-button-svg\"\n            src={closeItem}\n            alt=\"close svg\" >\n          </img>\n        </button>\n        <PostNav handlePostType={handlePostType} />\n        <div className=\"create-post-link-container\">\n          <input className=\"insert-link-input\"\n            type=\"url\"\n            placeholder=\"Insert Link here\"\n            onChange={handleInsertLink} >\n          </input>\n        </div>\n        <p className=\"error-text-post-input\"></p>\n        <TextForm handleFormSubmission={handleFormSubmission} />\n      </>\n    );\n  };\n\n  return (\n    <PostNav handlePostType={handlePostType} />\n  );\n};\n\nexport default CreatePostWeb;"],"names":["props","handleFormSubmission","className","onSubmit","e","htmlFor","id","placeholder","type","handlePostType","src","tamperSVG","alt","onFocus","text","textSVG","onClick","imgSVG","img","linkSVG","link","user","fetchNewPost","useState","status","postData","setPostData","selectedFile","setSelectedFile","typeOfPost","handleCloseForm","preventDefault","userRef","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","titleOfPost","document","querySelector","value","bodyOfPost","createPostTypeText","createPostTypeImg","linkOfPost","createPostTypeLink","uniqid","userInstanceRef","doc","uid","getDoc","getUserInstanceSnap","exists","post","account","data","username","author","body","comments","dislikes","imgURL","imgURLRef","likes","pid","time","Date","toLocaleString","title","views","whoDisliked","whoLiked","updateDoc","posts","setDoc","storage","getStorage","storageRef","ref","name","undefined","uploadBytes","then","snapshot","getDownloadURL","url","catch","error","alert","deleteObject","closeItem","accept","onChange","target","files","handleInsertImage","input","errorText","validity","valid","textContent","setTimeout"],"sourceRoot":""}